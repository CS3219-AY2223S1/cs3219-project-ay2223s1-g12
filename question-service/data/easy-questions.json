[
    {
        "QuestionTitle":"Minimum Window Substring",
        "QuestionBody":"Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\n\nThe testcases will be generated such that the answer is unique.\n\nA substring is a contiguous sequence of characters within the string.\n\nExamples:\n\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\n\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\n\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\n\nConstraints:\n\n* m == s.length\n* n == t.length\n* 1 <= m, n <= 105\n* s and t consist of uppercase and lowercase English letters.",
        "QuestionDifficulty":"hard"
    },
    {
        "QuestionTitle":"Best Time to Buy and Sell Stock",
        "QuestionBody":"You are given an array prices where prices[i] is the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\n\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\nExamples:\n\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\n\nInput: prices = [7,6,4,3,1]\nOutput: 0\n\nConstraints:\n* 1 <= prices.length <= 105\n* 0 <= prices[i] <= 104",
        "QuestionDifficulty":"easy"
    },
    {
        "QuestionTitle":"Balanced Binary Tree",
        "QuestionBody":"",
        "QuestionDifficulty":"easy"
    },
    {
        "QuestionTitle":"Balanced Binary Tree",
        "QuestionBody":"",
        "QuestionDifficulty":"easy"
    },
    {
        "QuestionTitle":"Balanced Binary Tree",
        "QuestionBody":"",
        "QuestionDifficulty":"easy"
    }
]
